import 'dart:io';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

class NotificacionService {
  static final FlutterLocalNotificationsPlugin _plugin =
      FlutterLocalNotificationsPlugin();

  /// üß≠ Inicializa las notificaciones locales
  static Future<void> inicializar() async {
    print('üöÄ [NotificacionService] Inicializando notificaciones locales...');
    tz.initializeTimeZones();

    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosInit = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const initSettings = InitializationSettings(
      android: androidInit,
      iOS: iosInit,
    );

    await _plugin.initialize(
      initSettings,
      onDidReceiveNotificationResponse: (response) {
        print('üì© [NotificacionService] Notificaci√≥n tocada: ${response.payload}');
      },
    );

    // üîí Pedir permisos
    if (Platform.isAndroid) {
      final androidImpl = _plugin.resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();
      await androidImpl?.requestNotificationsPermission();
      print('‚úÖ [NotificacionService] Permisos solicitados en Android.');
    } else if (Platform.isIOS) {
      await _plugin
          .resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(alert: true, badge: true, sound: true);
      print('‚úÖ [NotificacionService] Permisos solicitados en iOS.');
    }

    print('üéØ [NotificacionService] Inicializaci√≥n completada correctamente.');
  }

  /// üîî Programa una notificaci√≥n en una fecha y hora espec√≠fica
  static Future<void> programarNotificacion({
    required String titulo,
    required String cuerpo,
    required DateTime fecha,
    int? id,
  }) async {
    print('üïí [NotificacionService] Programando notificaci√≥n: "$titulo"');
    print('   üìÖ Fecha objetivo: $fecha');

    DateTime fechaFinal = fecha.isBefore(DateTime.now())
        ? DateTime.now().add(const Duration(seconds: 5))
        : fecha;

    final tzTime = tz.TZDateTime.from(fechaFinal, tz.local);
    final notifId = id ?? DateTime.now().millisecondsSinceEpoch.remainder(100000);

    print('   üß≠ Fecha TZ local: $tzTime');
    print('   üÜî ID de notificaci√≥n: $notifId');

    final androidDetails = AndroidNotificationDetails(
      'cocal_recordatorios',
      'Recordatorios de eventos',
      channelDescription: 'Notifica antes y durante los eventos programados',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
      ticker: 'Evento pr√≥ximo',
    );

    const iosDetails = DarwinNotificationDetails();
    final details =
        NotificationDetails(android: androidDetails, iOS: iosDetails);

    try {
      await _plugin.zonedSchedule(
        notifId,
        titulo,
        cuerpo,
        tzTime,
        details,
        androidAllowWhileIdle: true,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
      );

      print('‚úÖ [NotificacionService] Notificaci√≥n "$titulo" programada exitosamente para $tzTime');
    } catch (e) {
      print('‚ùå [NotificacionService] Error al programar notificaci√≥n "$titulo": $e');
    }
  }

  /// üöÄ Programa dos notificaciones: una antes del evento y otra al inicio exacto
  static Future<void> programarRecordatorioDoble({
    required String titulo,
    required DateTime fechaEvento,
    required int minutosAntes,
  }) async {
    print('\nüß© [NotificacionService] Programando recordatorio doble para "$titulo"');
    print('   üìÜ Fecha evento: $fechaEvento');
    print('   ‚è≥ Minutos antes: $minutosAntes');

    final fechaRecordatorio = fechaEvento.subtract(Duration(minutes: minutosAntes));

    await programarNotificacion(
      titulo: '‚è∞ Recordatorio de evento',
      cuerpo: 'Tu evento "$titulo" empieza en $minutosAntes minutos.',
      fecha: fechaRecordatorio,
      id: fechaEvento.millisecondsSinceEpoch.remainder(100000),
    );

    await programarNotificacion(
      titulo: 'üöÄ ¬°Tu evento ha comenzado!',
      cuerpo: 'Tu evento "$titulo" est√° comenzando ahora.',
      fecha: fechaEvento,
      id: (fechaEvento.millisecondsSinceEpoch.remainder(100000)) + 1,
    );

    print('üéâ [NotificacionService] Recordatorios doble programados correctamente.\n');
  }

  /// ‚ùå Cancela una notificaci√≥n por su ID
  static Future<void> cancelarNotificacion(int id) async {
    print('üßπ [NotificacionService] Cancelando notificaci√≥n ID $id...');
    await _plugin.cancel(id);
  }

  /// ‚ùå Cancela todas las notificaciones
  static Future<void> cancelarTodas() async {
    print('üßπ [NotificacionService] Cancelando todas las notificaciones...');
    await _plugin.cancelAll();
  }

  /// üîê Verifica si los permisos de notificaci√≥n est√°n otorgados
  static Future<bool> permisosOtorgados() async {
    final permisos = _plugin.resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin>();
    final bool? granted = await permisos?.areNotificationsEnabled();
    print('üîí [NotificacionService] Permisos otorgados: ${granted ?? false}');
    return granted ?? false;
  }
}
